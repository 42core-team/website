name: Build and Push Docker Image

on:
  push:
    branches: [main, dev, 60-helm-chart]
  pull_request:
    branches: [main, dev, 60-helm-chart]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: X64
            platform: linux/amd64
            arch: amd64
          - runner: ARM64
            platform: linux/arm64
            arch: arm64
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=sha,prefix={{branch}}-,format=short

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        timeout-minutes: 30
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha,scope=${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.arch }}

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.arch }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      image_tag: ${{ steps.env.outputs.image_tag }}
      branch: ${{ steps.env.outputs.original_branch }}

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name and determine environment
        id: env
        run: |
          # Extract branch name from GITHUB_REF and sanitize for Docker tags
          ORIGINAL_BRANCH=${GITHUB_REF#refs/heads/}
          SANITIZED_BRANCH=$(echo "${ORIGINAL_BRANCH}" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          # Determine environment
          if [ "${ORIGINAL_BRANCH}" = "main" ]; then
            ENVIRONMENT="prod"
          elif [ "${ORIGINAL_BRANCH}" = "dev" ]; then
            ENVIRONMENT="beta"
          else
            ENVIRONMENT="dev"
          fi
          
          # Generate image tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${SANITIZED_BRANCH}-${SHORT_SHA}"
          
          echo "original_branch=${ORIGINAL_BRANCH}" >> $GITHUB_OUTPUT
          echo "sanitized_branch=${SANITIZED_BRANCH}" >> $GITHUB_OUTPUT
          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "Branch: ${ORIGINAL_BRANCH} -> Environment: ${ENVIRONMENT}"
          echo "Image tag: ${IMAGE_TAG}"

      - name: Generate tags
        id: tags
        run: |
          BRANCH_NAME="${{ steps.env.outputs.sanitized_branch }}"
          ORIGINAL_BRANCH="${{ steps.env.outputs.original_branch }}"
          REGISTRY="${{ env.REGISTRY }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          
          # Base tags
          TAGS="${REGISTRY}/${IMAGE_NAME}:${BRANCH_NAME}"
          
          # Add latest tag for main branch
          if [ "${ORIGINAL_BRANCH}" = "main" ]; then
            TAGS="${TAGS},${REGISTRY}/${IMAGE_NAME}:latest"
          fi
          
          # Add short SHA tag
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          TAGS="${TAGS},${REGISTRY}/${IMAGE_NAME}:${BRANCH_NAME}-${SHORT_SHA}"
          
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "Generated tags: ${TAGS}"

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # Create multi-arch manifest for each tag
          TAGS="${{ steps.tags.outputs.tags }}"
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          
          for TAG in "${TAG_ARRAY[@]}"; do
            echo "Creating manifest for tag: $TAG"
            docker buildx imagetools create -t "$TAG" \
              $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)
          done

      - name: Inspect image
        run: |
          BRANCH_NAME="${{ steps.env.outputs.sanitized_branch }}"
          echo "Inspecting multi-arch image for branch: ${BRANCH_NAME}"
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}

      - name: Output image details
        run: |
          echo "## Multi-arch Image Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ steps.env.outputs.original_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags created:**" >> $GITHUB_STEP_SUMMARY
          
          TAGS="${{ steps.tags.outputs.tags }}"
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"
          for TAG in "${TAG_ARRAY[@]}"; do
            echo "- \`${TAG}\`" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Supported architectures:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

  # Deploy to Kubernetes using Helm
  deploy:
    uses: ./.github/workflows/deploy.yml
    needs: merge
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: read
      deployments: write
    
    with:
      environment: ${{ needs.merge.outputs.environment }}
      image_tag: ${{ needs.merge.outputs.image_tag }}
      branch: ${{ needs.merge.outputs.branch }}
    
    secrets: inherit

  # Summary job to show what was built and deployed
  summary:
    runs-on: ubuntu-latest
    needs: [build, merge, deploy]
    if: always()
    steps:
      - name: Build and Deploy Summary
        run: |
          echo "## Build and Deploy Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "push" ]; then
            ORIGINAL_BRANCH=${GITHUB_REF#refs/heads/}
            SANITIZED_BRANCH=$(echo "${ORIGINAL_BRANCH}" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            
            # Determine environment
            if [ "${ORIGINAL_BRANCH}" = "main" ]; then
              ENVIRONMENT="🟢 Production"
            elif [ "${ORIGINAL_BRANCH}" = "dev" ]; then
              ENVIRONMENT="🟡 Beta/Staging"
            else
              ENVIRONMENT="🔵 Development"
            fi
            
            echo "### Docker Image" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Multi-arch image built and pushed for branch:** \`${ORIGINAL_BRANCH}\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "${ORIGINAL_BRANCH}" != "${SANITIZED_BRANCH}" ]; then
              echo "   *(Docker tag uses sanitized name: \`${SANITIZED_BRANCH}\`)*" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Available tags:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SANITIZED_BRANCH}\`" >> $GITHUB_STEP_SUMMARY
            
            if [ "${ORIGINAL_BRANCH}" = "main" ]; then
              echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SANITIZED_BRANCH}-${SHORT_SHA}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Architectures:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Deployment" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.deploy.result }}" = "success" ]; then
              echo "✅ **Successfully deployed to ${ENVIRONMENT} environment**" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy.result }}" = "failure" ]; then
              echo "❌ **Deployment failed**" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
              echo "⏭️ **Deployment skipped**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **Multi-arch build completed for PR** (images not pushed)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Architectures tested:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          fi 