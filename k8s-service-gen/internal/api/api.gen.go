// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Message *string `json:"message,omitempty"`
}

// Id defines model for id.
type Id = openapi_types.UUID

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorResponse

// NotFound defines model for NotFound.
type NotFound = ErrorResponse

// GetLogsOfContainerParams defines parameters for GetLogsOfContainer.
type GetLogsOfContainerParams struct {
	// Container The container to fetch logs for (e.g., game, bot-teamUUID).
	Container *string `form:"container,omitempty" json:"container,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health
	// (GET /health)
	Health(ctx echo.Context) error
	// Get logs of container
	// (GET /v1/match/{id}/logs)
	GetLogsOfContainer(ctx echo.Context, id Id, params GetLogsOfContainerParams) error
	// Get containers of match
	// (GET /v1/match/{id}/logs/containers)
	GetContainersOfMatch(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// GetLogsOfContainer converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogsOfContainer(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogsOfContainerParams
	// ------------- Optional query parameter "container" -------------

	err = runtime.BindQueryParameter("form", true, false, "container", ctx.QueryParams(), &params.Container)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter container: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLogsOfContainer(ctx, id, params)
	return err
}

// GetContainersOfMatch converts echo context to params.
func (w *ServerInterfaceWrapper) GetContainersOfMatch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: false})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetContainersOfMatch(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/health", wrapper.Health)
	router.GET(baseURL+"/v1/match/:id/logs", wrapper.GetLogsOfContainer)
	router.GET(baseURL+"/v1/match/:id/logs/containers", wrapper.GetContainersOfMatch)

}

type InternalServerErrorJSONResponse ErrorResponse

type NotFoundJSONResponse ErrorResponse

type HealthRequestObject struct {
}

type HealthResponseObject interface {
	VisitHealthResponse(w http.ResponseWriter) error
}

type Health200JSONResponse MessageResponse

func (response Health200JSONResponse) VisitHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLogsOfContainerRequestObject struct {
	Id     Id `json:"id,omitempty"`
	Params GetLogsOfContainerParams
}

type GetLogsOfContainerResponseObject interface {
	VisitGetLogsOfContainerResponse(w http.ResponseWriter) error
}

type GetLogsOfContainer200TextResponse string

func (response GetLogsOfContainer200TextResponse) VisitGetLogsOfContainerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetLogsOfContainer404JSONResponse struct{ NotFoundJSONResponse }

func (response GetLogsOfContainer404JSONResponse) VisitGetLogsOfContainerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetContainersOfMatchRequestObject struct {
	Id Id `json:"id,omitempty"`
}

type GetContainersOfMatchResponseObject interface {
	VisitGetContainersOfMatchResponse(w http.ResponseWriter) error
}

type GetContainersOfMatch200JSONResponse struct {
	Containers []string `json:"containers"`
	Id         string   `json:"id"`
}

func (response GetContainersOfMatch200JSONResponse) VisitGetContainersOfMatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetContainersOfMatch404JSONResponse struct{ NotFoundJSONResponse }

func (response GetContainersOfMatch404JSONResponse) VisitGetContainersOfMatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetContainersOfMatch500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetContainersOfMatch500JSONResponse) VisitGetContainersOfMatchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// health
	// (GET /health)
	Health(ctx context.Context, request HealthRequestObject) (HealthResponseObject, error)
	// Get logs of container
	// (GET /v1/match/{id}/logs)
	GetLogsOfContainer(ctx context.Context, request GetLogsOfContainerRequestObject) (GetLogsOfContainerResponseObject, error)
	// Get containers of match
	// (GET /v1/match/{id}/logs/containers)
	GetContainersOfMatch(ctx context.Context, request GetContainersOfMatchRequestObject) (GetContainersOfMatchResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Health operation middleware
func (sh *strictHandler) Health(ctx echo.Context) error {
	var request HealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Health(ctx.Request().Context(), request.(HealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Health")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthResponseObject); ok {
		return validResponse.VisitHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLogsOfContainer operation middleware
func (sh *strictHandler) GetLogsOfContainer(ctx echo.Context, id Id, params GetLogsOfContainerParams) error {
	var request GetLogsOfContainerRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogsOfContainer(ctx.Request().Context(), request.(GetLogsOfContainerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogsOfContainer")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLogsOfContainerResponseObject); ok {
		return validResponse.VisitGetLogsOfContainerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetContainersOfMatch operation middleware
func (sh *strictHandler) GetContainersOfMatch(ctx echo.Context, id Id) error {
	var request GetContainersOfMatchRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetContainersOfMatch(ctx.Request().Context(), request.(GetContainersOfMatchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetContainersOfMatch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetContainersOfMatchResponseObject); ok {
		return validResponse.VisitGetContainersOfMatchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWTY/bNhD9KwTbQwuokrZND9Vt+5F0gaYbJM1pYRQ0NZIYSKQyHDkxDP33Ykhbllb2",
	"NgUWvSyWIjWP896bZx2kdl3vLFjysjjIXqHqgADDypT8twSv0fRknJWFfP/+7lfhKkENiE6RblKZSMM7",
	"vaJGJtKqDmTB7ybS6wY6xUUqh50iWchhCDu07/mUJzS2luM4JhLB9856CNB3lgCtat8B7gB/Q3TIj7Wz",
	"BJb4X9X3rdGKr5V98Hy3wwzva4RKFvKr7NxfFnd9Fqq9PaJF7GWPt1aYI77w4QIC+B3htB4QoUzlmMg/",
	"Hb10gy3/v3v91cDpPlpZ60hUxpZBCoSPA3iCUiB4N6CGVHKBY22GXpZnsdH1gGQi43DiGD6rrm8h8vC4",
	"77Vy0xO3/QCamJnX4L2q4TpWFw8s0e57wECbYG5a4Gb8oDV4Xw1tu/8icG4Z9ICG9u+49Yj3MygEvB2o",
	"4dU2rF6eHKkdwt8ns3KtuH9Ga4j6KIexlVuPxO2bO1E5FJ2yqja2FsqW0UBKE68/GWrisIAPXRgKHb/m",
	"R+L2zZ1M5A7Qx3I3aZ7mTKPrwareyEL+kN6kuUzCiIWGsgZUG7upIdjOndi7K2Uhf4/bj4bq+zx/NrM+",
	"1viKXY++FJ+Un4mZBIrobOdGeYFAA1q45mdh7HEnIoqtK/dHkw9dp3DPUsW++WG2u8kC59nBlGPWutrP",
	"6Fre9G2A9kK1reCDp4DzPWhTGSgFc6aMBWT9lly/AvrD1f6++uV0Jih1DtKHwwVipoKCnKiAjRCQ2Ujf",
	"QFqniahVB4nYOvqOQHUcvN9OYftxANyf01bPoM/6rablsqTnu2amlOPmX11D8JmyvlXmkV8uhPqyceaJ",
	"dUYDu9V0j4l8kb+45rvpStmUu/NhDyzPx/xhw42cnfEKaJJ2zhYp9sWDDFaRmyvOyaZXvsBEojWeGEft",
	"lGnVtp2pHQVeemv6GV35anKUv69CWKyd9SyCPh0Dy+xeMmEIOn9B+yk8FaLa8zp+TKwDnCfdIJQsQvg0",
	"mAFs1vm+9tRTZD+f1xL5Y6Tt6Rcufbf8Z5/OGnBVtMclp4ayDHMxY5wgDl5jxd4NKFqnVSvA7gw627Hu",
	"iRywPf68FVkWDjTOU/FTnufBNUfEwyllIvK4Gf8JAAD//yrwq7s3CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
